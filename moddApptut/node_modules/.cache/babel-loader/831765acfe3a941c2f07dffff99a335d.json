{"ast":null,"code":"var _jsxFileName = \"/home/marcus/Marcus/blockchain/Lab 15/moddApptut/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { ethers } from 'ethers';\nimport { useState, useEffect } from 'react';\nimport TokenArtifact from \"./artifacts/contracts/Turing.sol/Turing.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst tokenAddress = \"0x49e0cfb6b6ce674907f523e1f92b85f3fe8adf1d\";\n\nfunction App() {\n  _s();\n\n  const [tokenData, setTokenData] = useState({\n    name: \"\",\n    symbol: \"\"\n  });\n  const [voteCodinome, setVoteCodinome] = useState(\"\");\n  const [voteAmount, setVoteAmount] = useState(\"\");\n  const [issueCodinome, setIssueCodinome] = useState(\"\");\n  const [issueAmount, setIssueAmount] = useState(\"\");\n  const [ranking, setRanking] = useState([]);\n  const [isVotingOn, setIsVotingOn] = useState(false);\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n\n  const connectMetaMask = async () => {\n    if (window.ethereum) {\n      try {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        await provider.send(\"eth_requestAccounts\", []);\n        const signer = provider.getSigner();\n        setProvider(provider);\n        setSigner(signer);\n        setIsConnected(true);\n        fetchTokenData(signer);\n        fetchRanking(provider);\n        fetchVotingStatus(provider);\n      } catch (error) {\n        console.error(\"Erro ao conectar ao MetaMask:\", error);\n        alert(\"Erro ao conectar ao MetaMask. Verifique o console para mais detalhes.\");\n      }\n    } else {\n      alert(\"Por favor, instale o MetaMask!\");\n    }\n  };\n\n  async function _initializeContract(init) {\n    return new ethers.Contract(tokenAddress, TokenArtifact.abi, init);\n  }\n\n  async function fetchTokenData(signer) {\n    try {\n      const contract = await _initializeContract(signer);\n      const name = await contract.name();\n      const symbol = await contract.symbol();\n      setTokenData({\n        name,\n        symbol\n      });\n    } catch (error) {\n      console.error(\"Erro ao buscar dados do token:\", error);\n      alert(\"Erro ao buscar dados do token. Verifique o console para mais detalhes.\");\n    }\n  }\n\n  async function issueToken() {\n    if (!issueCodinome || !issueAmount) return alert(\"Preencha todos os campos!\");\n\n    try {\n      const contract = await _initializeContract(signer);\n      const amountInSaTuring = ethers.utils.parseUnits(issueAmount, 18);\n      const tx = await contract.issueToken(issueCodinome, amountInSaTuring);\n      await tx.wait();\n      alert(\"Tokens emitidos com sucesso!\");\n      fetchRanking(provider);\n    } catch (error) {\n      console.error(\"Erro ao emitir tokens:\", error);\n      alert(\"Erro ao emitir tokens. Verifique o console para mais detalhes.\");\n    }\n  }\n\n  async function vote() {\n    if (!voteCodinome || !voteAmount) return alert(\"Preencha todos os campos!\");\n\n    try {\n      const contract = await _initializeContract(signer);\n      const amountInSaTuring = ethers.utils.parseUnits(voteAmount, 18);\n      const tx = await contract.vote(voteCodinome, amountInSaTuring);\n      await tx.wait();\n      alert(\"Voto computado!\");\n      fetchRanking(provider);\n    } catch (error) {\n      console.error(\"Erro ao votar:\", error);\n      alert(`Erro ao votar: ${error.message}`);\n    }\n  }\n\n  async function votingOn() {\n    try {\n      const contract = await _initializeContract(signer);\n      const tx = await contract.votingOn();\n      await tx.wait();\n      alert(\"Votação ativada!\");\n      fetchVotingStatus(provider);\n    } catch (error) {\n      console.error(\"Erro ao ativar votação:\", error);\n      alert(\"Erro ao ativar votação. Verifique o console para mais detalhes.\");\n    }\n  }\n\n  async function votingOff() {\n    try {\n      const contract = await _initializeContract(signer);\n      const tx = await contract.votingOff();\n      await tx.wait();\n      alert(\"Votação desativada!\");\n      fetchVotingStatus(provider);\n    } catch (error) {\n      console.error(\"Erro ao desativar votação:\", error);\n      alert(\"Erro ao desativar votação. Verifique o console para mais detalhes.\");\n    }\n  }\n\n  async function fetchRanking() {\n    try {\n      if (!signer) return alert(\"Conecte-se ao MetaMask primeiro!\");\n      const contract = await _initializeContract(signer);\n\n      if (!contract.getBalances) {\n        console.error(\"Erro: getBalances não está definida na ABI do contrato!\");\n        return;\n      }\n\n      const [codinomes, balances] = await contract.getBalances();\n      console.log(\"Dados brutos do contrato:\", {\n        codinomes,\n        balances\n      });\n\n      if (!codinomes || !balances) {\n        console.error(\"Erro: Resposta inválida do contrato\", {\n          codinomes,\n          balances\n        });\n        return;\n      }\n\n      const rankingData = codinomes.map((nome, index) => ({\n        nome,\n        balance: ethers.BigNumber.from(balances[index] || 0)\n      }));\n      rankingData.sort((a, b) => b.balance.sub(a.balance));\n      console.log(\"Ranking final:\", rankingData);\n      setRanking(rankingData.map(user => ({\n        nome: user.nome,\n        balance: ethers.utils.formatUnits(user.balance, 18)\n      })));\n    } catch (error) {\n      console.error(\"Erro ao buscar ranking:\", error);\n    }\n  }\n\n  async function fetchVotingStatus(provider) {\n    try {\n      const contract = await _initializeContract(provider);\n      const status = await contract.isVotingOn();\n      setIsVotingOn(status);\n    } catch (error) {\n      console.error(\"Erro ao buscar estado da votação:\", error);\n    }\n  }\n\n  useEffect(() => {\n    async function loadData() {\n      if (signer) {\n        await fetchTokenData(signer);\n        await fetchRanking();\n        await fetchVotingStatus();\n      }\n    }\n\n    loadData();\n  }, [signer]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: !isConnected ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: connectMetaMask,\n        className: \"connect-button\",\n        children: \"Conectar ao MetaMask\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left-panel\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: [tokenData.name, \" (\", tokenData.symbol, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Emitir Tokens\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            onChange: e => setIssueCodinome(e.target.value),\n            placeholder: \"Codinome\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            onChange: e => setIssueAmount(e.target.value),\n            placeholder: \"Quantidade (em Turings)\",\n            type: \"number\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: issueToken,\n            children: \"Emitir Tokens\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Votar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            onChange: e => setVoteCodinome(e.target.value),\n            placeholder: \"Codinome\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            onChange: e => setVoteAmount(e.target.value),\n            placeholder: \"Quantidade (em Turings)\",\n            type: \"number\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: vote,\n            children: \"Votar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Controle de Vota\\xE7\\xE3o\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: votingOn,\n            children: \"Ativar Vota\\xE7\\xE3o\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: votingOff,\n            children: \"Desativar Vota\\xE7\\xE3o\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Estado da Vota\\xE7\\xE3o: \", isVotingOn ? \"Ativada\" : \"Desativada\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"right-panel\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Ranking\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: ranking.map((user, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [user.nome, \": \", user.balance, \" Turings\"]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"e2MXQYnPU/rDnOkZBgQxdw2Yttc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/marcus/Marcus/blockchain/Lab 15/moddApptut/src/App.js"],"names":["ethers","useState","useEffect","TokenArtifact","tokenAddress","App","tokenData","setTokenData","name","symbol","voteCodinome","setVoteCodinome","voteAmount","setVoteAmount","issueCodinome","setIssueCodinome","issueAmount","setIssueAmount","ranking","setRanking","isVotingOn","setIsVotingOn","provider","setProvider","signer","setSigner","isConnected","setIsConnected","connectMetaMask","window","ethereum","providers","Web3Provider","send","getSigner","fetchTokenData","fetchRanking","fetchVotingStatus","error","console","alert","_initializeContract","init","Contract","abi","contract","issueToken","amountInSaTuring","utils","parseUnits","tx","wait","vote","message","votingOn","votingOff","getBalances","codinomes","balances","log","rankingData","map","nome","index","balance","BigNumber","from","sort","a","b","sub","user","formatUnits","status","loadData","e","target","value"],"mappings":"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","sourcesContent":["import './App.css';\nimport { ethers } from 'ethers';\nimport { useState, useEffect } from 'react';\nimport TokenArtifact from \"./artifacts/contracts/Turing.sol/Turing.json\";\n\nconst tokenAddress = \"0x49e0cfb6b6ce674907f523e1f92b85f3fe8adf1d\";\n\nfunction App() {\n  const [tokenData, setTokenData] = useState({ name: \"\", symbol: \"\" });\n  const [voteCodinome, setVoteCodinome] = useState(\"\");\n  const [voteAmount, setVoteAmount] = useState(\"\");\n  \n  const [issueCodinome, setIssueCodinome] = useState(\"\");\n  const [issueAmount, setIssueAmount] = useState(\"\");\n  \n  const [ranking, setRanking] = useState([]);\n  const [isVotingOn, setIsVotingOn] = useState(false);\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n\n  const connectMetaMask = async () => {\n    if (window.ethereum) {\n      try {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        await provider.send(\"eth_requestAccounts\", []);\n        const signer = provider.getSigner();\n        setProvider(provider);\n        setSigner(signer);\n        setIsConnected(true);\n        fetchTokenData(signer);\n        fetchRanking(provider);\n        fetchVotingStatus(provider);\n      } catch (error) {\n        console.error(\"Erro ao conectar ao MetaMask:\", error);\n        alert(\"Erro ao conectar ao MetaMask. Verifique o console para mais detalhes.\");\n      }\n    } else {\n      alert(\"Por favor, instale o MetaMask!\");\n    }\n  };\n\n  async function _initializeContract(init) {\n    return new ethers.Contract(tokenAddress, TokenArtifact.abi, init);\n  }\n\n  async function fetchTokenData(signer) {\n    try {\n      const contract = await _initializeContract(signer);\n      const name = await contract.name();\n      const symbol = await contract.symbol();\n      setTokenData({ name, symbol });\n    } catch (error) {\n      console.error(\"Erro ao buscar dados do token:\", error);\n      alert(\"Erro ao buscar dados do token. Verifique o console para mais detalhes.\");\n    }\n  }\n\n  async function issueToken() {\n    if (!issueCodinome || !issueAmount) return alert(\"Preencha todos os campos!\");\n    try {\n      const contract = await _initializeContract(signer);\n      const amountInSaTuring = ethers.utils.parseUnits(issueAmount, 18);\n      const tx = await contract.issueToken(issueCodinome, amountInSaTuring);\n      await tx.wait();\n      alert(\"Tokens emitidos com sucesso!\");\n      fetchRanking(provider);\n    } catch (error) {\n      console.error(\"Erro ao emitir tokens:\", error);\n      alert(\"Erro ao emitir tokens. Verifique o console para mais detalhes.\");\n    }\n  }\n\n  async function vote() {\n    if (!voteCodinome || !voteAmount) return alert(\"Preencha todos os campos!\");\n    try {\n      const contract = await _initializeContract(signer);\n      const amountInSaTuring = ethers.utils.parseUnits(voteAmount, 18);\n      const tx = await contract.vote(voteCodinome, amountInSaTuring);\n      await tx.wait();\n      alert(\"Voto computado!\");\n      fetchRanking(provider);\n    } catch (error) {\n      console.error(\"Erro ao votar:\", error);\n      alert(`Erro ao votar: ${error.message}`);\n    }\n  }\n\n  async function votingOn() {\n    try {\n      const contract = await _initializeContract(signer);\n      const tx = await contract.votingOn();\n      await tx.wait();\n      alert(\"Votação ativada!\");\n      fetchVotingStatus(provider);\n    } catch (error) {\n      console.error(\"Erro ao ativar votação:\", error);\n      alert(\"Erro ao ativar votação. Verifique o console para mais detalhes.\");\n    }\n  }\n\n  async function votingOff() {\n    try {\n      const contract = await _initializeContract(signer);\n      const tx = await contract.votingOff();\n      await tx.wait();\n      alert(\"Votação desativada!\");\n      fetchVotingStatus(provider);\n    } catch (error) {\n      console.error(\"Erro ao desativar votação:\", error);\n      alert(\"Erro ao desativar votação. Verifique o console para mais detalhes.\");\n    }\n  }\n\n  async function fetchRanking() {\n    try {\n      if (!signer) return alert(\"Conecte-se ao MetaMask primeiro!\");\n  \n      const contract = await _initializeContract(signer);\n      \n      if (!contract.getBalances) {\n        console.error(\"Erro: getBalances não está definida na ABI do contrato!\");\n        return;\n      }\n  \n      const [codinomes, balances] = await contract.getBalances();\n  \n      console.log(\"Dados brutos do contrato:\", { codinomes, balances });\n  \n      if (!codinomes || !balances) {\n        console.error(\"Erro: Resposta inválida do contrato\", { codinomes, balances });\n        return;\n      }\n  \n      const rankingData = codinomes.map((nome, index) => ({\n        nome,\n        balance: ethers.BigNumber.from(balances[index] || 0),\n      }));\n  \n      rankingData.sort((a, b) => b.balance.sub(a.balance));\n  \n      console.log(\"Ranking final:\", rankingData);\n  \n      setRanking(\n        rankingData.map(user => ({\n          nome: user.nome,\n          balance: ethers.utils.formatUnits(user.balance, 18),\n        }))\n      );\n    } catch (error) {\n      console.error(\"Erro ao buscar ranking:\", error);\n    }\n  }\n  \n  async function fetchVotingStatus(provider) {\n    try {\n      const contract = await _initializeContract(provider);\n      const status = await contract.isVotingOn();\n      setIsVotingOn(status);\n    } catch (error) {\n      console.error(\"Erro ao buscar estado da votação:\", error);\n    }\n  }\n\n  useEffect(() => {\n    async function loadData() {\n      if (signer) {\n        await fetchTokenData(signer);\n        await fetchRanking();\n        await fetchVotingStatus();\n      }\n    }\n    loadData();\n  }, [signer]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {!isConnected ? (\n          <button onClick={connectMetaMask} className=\"connect-button\">\n            Conectar ao MetaMask\n          </button>\n        ) : (\n          <div className=\"main-container\">\n            <div className=\"left-panel\">\n              <h1>{tokenData.name} ({tokenData.symbol})</h1>\n              \n              <h2>Emitir Tokens</h2>\n              <input onChange={e => setIssueCodinome(e.target.value)} placeholder=\"Codinome\" />\n              <input onChange={e => setIssueAmount(e.target.value)} placeholder=\"Quantidade (em Turings)\" type=\"number\" />\n              <button onClick={issueToken}>Emitir Tokens</button>\n\n              <h2>Votar</h2>\n              <input onChange={e => setVoteCodinome(e.target.value)} placeholder=\"Codinome\" />\n              <input onChange={e => setVoteAmount(e.target.value)} placeholder=\"Quantidade (em Turings)\" type=\"number\" />\n              <button onClick={vote}>Votar</button>\n              \n              <h2>Controle de Votação</h2>\n              <button onClick={votingOn}>Ativar Votação</button>\n              <button onClick={votingOff}>Desativar Votação</button>\n\n              <h2>Estado da Votação: {isVotingOn ? \"Ativada\" : \"Desativada\"}</h2>\n            </div>\n\n            <div className=\"right-panel\">\n              <h2>Ranking</h2>\n              <ul>\n                {ranking.map((user, index) => (\n                  <li key={index}>\n                    {user.nome}: {user.balance} Turings\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        )}\n      </header>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}