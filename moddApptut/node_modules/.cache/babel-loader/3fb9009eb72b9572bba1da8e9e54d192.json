{"ast":null,"code":"var _jsxFileName = \"/home/marcus/Marcus/blockchain/Lab 15/moddApptut/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { ethers } from 'ethers';\nimport { useState, useEffect } from 'react';\nimport TokenArtifact from \"./artifacts/contracts/Turing.sol/Turing.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst tokenAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\n\nfunction App() {\n  _s();\n\n  const [tokenData, setTokenData] = useState({});\n  const [amount, setAmount] = useState(\"\");\n  const [codinome, setCodinome] = useState(\"\");\n  const [ranking, setRanking] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n\n  async function _initializeContract(init) {\n    return new ethers.Contract(tokenAddress, TokenArtifact.abi, init);\n  }\n\n  async function _getTokenData() {\n    const contract = await _initializeContract(signer);\n    const name = await contract.name();\n    const symbol = await contract.symbol();\n    setTokenData({\n      name,\n      symbol\n    });\n  }\n\n  async function requestAccount() {\n    await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n  }\n\n  async function issueToken() {\n    if (!codinome || !amount) return alert(\"Preencha todos os campos!\");\n    await requestAccount();\n\n    try {\n      const contract = await _initializeContract(signer);\n      const tx = await contract.issueToken(codinome, ethers.utils.parseEther(amount));\n      await tx.wait();\n      alert(\"Tokens emitidos com sucesso!\");\n      fetchRanking();\n    } catch (error) {\n      if (error.reason) {\n        alert(`Erro: ${error.reason}`);\n      } else {\n        alert(\"Ocorreu um erro inesperado.\");\n        console.error(error);\n      }\n    }\n  }\n\n  async function vote() {\n    if (!codinome || !amount) return alert(\"Preencha todos os campos!\");\n    await requestAccount();\n    const contract = await _initializeContract(signer);\n    const tx = await contract.vote(codinome, ethers.utils.parseEther(amount));\n    await tx.wait();\n    alert(\"Voto computado!\");\n    fetchRanking();\n  }\n\n  async function votingOn() {\n    await requestAccount();\n    const contract = await _initializeContract(signer);\n    await contract.votingOn();\n    alert(\"Votação ativada!\");\n  }\n\n  async function votingOff() {\n    await requestAccount();\n    const contract = await _initializeContract(signer);\n    await contract.votingOff();\n    alert(\"Votação desativada!\");\n  }\n\n  async function fetchRanking() {\n    try {\n      const contract = await _initializeContract(provider); // Corrigindo a obtenção dos nomes dos alunos\n\n      const accountList = Object.keys(nomeParaEndereco);\n      const balances = await Promise.all(accountList.map(async nome => {\n        try {\n          const address = await contract.nomeParaEndereco(nome);\n          if (address === ethers.constants.AddressZero) return null; // Ignora entradas inválidas\n\n          const balance = await contract.balanceOf(address);\n          return {\n            nome,\n            balance: parseFloat(ethers.utils.formatEther(balance))\n          };\n        } catch (error) {\n          console.error(`Erro ao buscar saldo para ${nome}:`, error);\n          return null;\n        }\n      })); // Filtra valores nulos e ordena por saldo\n\n      const validBalances = balances.filter(user => user !== null);\n      validBalances.sort((a, b) => b.balance - a.balance);\n      setRanking(validBalances);\n    } catch (error) {\n      console.error(\"Erro ao buscar ranking:\", error);\n    }\n  }\n\n  useEffect(() => {\n    fetchRanking();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: _getTokenData,\n        children: \"Get Token Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [tokenData.name, \" (\", tokenData.symbol, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Emitir Tokens\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => setCodinome(e.target.value),\n        placeholder: \"Codinome\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => setAmount(e.target.value),\n        placeholder: \"Quantidade\",\n        type: \"number\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: issueToken,\n        children: \"Emitir Tokens\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Votar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: vote,\n        children: \"Votar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Controle de Vota\\xE7\\xE3o\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: votingOn,\n        children: \"Ativar Vota\\xE7\\xE3o\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: votingOff,\n        children: \"Desativar Vota\\xE7\\xE3o\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Ranking\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: ranking.map((user, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [user.nome, \": \", user.balance, \" Turings\"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"4YFCvDK866IcZSJlmujcLCFKtns=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/marcus/Marcus/blockchain/Lab 15/moddApptut/src/App.js"],"names":["ethers","useState","useEffect","TokenArtifact","tokenAddress","App","tokenData","setTokenData","amount","setAmount","codinome","setCodinome","ranking","setRanking","accounts","setAccounts","provider","providers","Web3Provider","window","ethereum","signer","getSigner","_initializeContract","init","Contract","abi","_getTokenData","contract","name","symbol","requestAccount","request","method","issueToken","alert","tx","utils","parseEther","wait","fetchRanking","error","reason","console","vote","votingOn","votingOff","accountList","Object","keys","nomeParaEndereco","balances","Promise","all","map","nome","address","constants","AddressZero","balance","balanceOf","parseFloat","formatEther","validBalances","filter","user","sort","a","b","e","target","value","index"],"mappings":"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","sourcesContent":["import './App.css';\nimport { ethers } from 'ethers';\nimport { useState, useEffect } from 'react';\nimport TokenArtifact from \"./artifacts/contracts/Turing.sol/Turing.json\";\n\nconst tokenAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\n\nfunction App() {\n  const [tokenData, setTokenData] = useState({});\n  const [amount, setAmount] = useState(\"\");\n  const [codinome, setCodinome] = useState(\"\");\n  const [ranking, setRanking] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n\n  async function _initializeContract(init) {\n    return new ethers.Contract(tokenAddress, TokenArtifact.abi, init);\n  }\n\n  async function _getTokenData() {\n    const contract = await _initializeContract(signer);\n    const name = await contract.name();\n    const symbol = await contract.symbol();\n    setTokenData({ name, symbol });\n  }\n\n  async function requestAccount() {\n    await window.ethereum.request({ method: 'eth_requestAccounts' });\n  }\n\n  async function issueToken() {\n    if (!codinome || !amount) return alert(\"Preencha todos os campos!\");\n    await requestAccount();\n    \n    try {\n        const contract = await _initializeContract(signer);\n        const tx = await contract.issueToken(codinome, ethers.utils.parseEther(amount));\n        await tx.wait();\n        alert(\"Tokens emitidos com sucesso!\");\n        fetchRanking();\n    } catch (error) {\n        if (error.reason) {\n            alert(`Erro: ${error.reason}`);\n        } else {\n            alert(\"Ocorreu um erro inesperado.\");\n            console.error(error);\n        }\n    }\n}\n\n  async function vote() {\n    if (!codinome || !amount) return alert(\"Preencha todos os campos!\");\n    await requestAccount();\n    const contract = await _initializeContract(signer);\n    const tx = await contract.vote(codinome, ethers.utils.parseEther(amount));\n    await tx.wait();\n    alert(\"Voto computado!\");\n    fetchRanking();\n  }\n\n  async function votingOn() {\n    await requestAccount();\n    const contract = await _initializeContract(signer);\n    await contract.votingOn();\n    alert(\"Votação ativada!\");\n  }\n\n  async function votingOff() {\n    await requestAccount();\n    const contract = await _initializeContract(signer);\n    await contract.votingOff();\n    alert(\"Votação desativada!\");\n  }\n\n  async function fetchRanking() {\n    try {\n        const contract = await _initializeContract(provider);\n\n        // Corrigindo a obtenção dos nomes dos alunos\n        const accountList = Object.keys(nomeParaEndereco); \n        \n        const balances = await Promise.all(\n            accountList.map(async (nome) => {\n                try {\n                    const address = await contract.nomeParaEndereco(nome);\n                    if (address === ethers.constants.AddressZero) return null; // Ignora entradas inválidas\n\n                    const balance = await contract.balanceOf(address);\n                    return { nome, balance: parseFloat(ethers.utils.formatEther(balance)) };\n                } catch (error) {\n                    console.error(`Erro ao buscar saldo para ${nome}:`, error);\n                    return null; \n                }\n            })\n        );\n\n        // Filtra valores nulos e ordena por saldo\n        const validBalances = balances.filter(user => user !== null);\n        validBalances.sort((a, b) => b.balance - a.balance);\n\n        setRanking(validBalances);\n    } catch (error) {\n        console.error(\"Erro ao buscar ranking:\", error);\n    }\n}\n\nuseEffect(() => {\n    fetchRanking();\n}, []);\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <button onClick={_getTokenData}>Get Token Data</button>\n        <h1>{tokenData.name} ({tokenData.symbol})</h1>\n        \n        <h2>Emitir Tokens</h2>\n        <input onChange={e => setCodinome(e.target.value)} placeholder=\"Codinome\" />\n        <input onChange={e => setAmount(e.target.value)} placeholder=\"Quantidade\" type=\"number\" />\n        <button onClick={issueToken}>Emitir Tokens</button>\n        \n        <h2>Votar</h2>\n        <button onClick={vote}>Votar</button>\n        \n        <h2>Controle de Votação</h2>\n        <button onClick={votingOn}>Ativar Votação</button>\n        <button onClick={votingOff}>Desativar Votação</button>\n\n        <h2>Ranking</h2>\n        <ul>\n          {ranking.map((user, index) => (\n            <li key={index}>{user.nome}: {user.balance} Turings</li>\n          ))}\n        </ul>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}